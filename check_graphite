#!/usr/bin/env ruby
#/root/.rbenv/shims/ruby

require "rubygems"
require "optparse"
require "rest-client"
require "json"

EXIT_OK = 0
EXIT_WARNING = 1
EXIT_CRITICAL = 2
EXIT_UNKNOWN = 3

options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options]"

  options[:url] = nil
  opts.on("-u", "--url URL", "The Graphite installation url") do |url|
    options[:url] = url
  end
  options[:metric] = nil
  opts.on("-m", "--metric NAME", "The metric string") do |metric|
    options[:metric] = metric
  end
  options[:timeInterval] = 10
  opts.on("-t", "--timeInterval TIMEINTERVAL", "Time interval, in seconds, at which the metric is published (default: 10)") do |timeInterval|
    options[:timeInterval] = timeInterval
  end
  options[:datapoints] = 10
  opts.on("-p", "--datapoints DATAPOINTS", "Number of datapoints to check (default: 3)") do |datapoints|
    options[:datapoints] = datapoints
  end
  options[:skipDatapoints] = 0
  opts.on("-s", "--skipDatapoints SKIP", "Number of datapoints to skip in case of metrics lags (default: 0)") do |skipDatapoints|
    options[:skipDatapoints] = skipDatapoints
  end
  options[:alarmThreshold] = 3
  opts.on("-a", "--alarmThreshold THRESHOLD", "Number of breaching datapoints before alarming (default: 3)") do |alarmThreshold|
    options[:alarmThreshold] = alarmThreshold
  end
  options[:warning] = nil
  opts.on("-w", "--warning VALUE", "Warning threshold") do |warning|
    options[:warning] = warning
  end
  options[:critical] = nil
  opts.on("-c", "--critical VALUE", "Critical threshold") do |critical|
    options[:critical] = critical
  end
  options[:verbose] = nil
  opts.on("-v", "--verbose", "Enable debug logging") do
    options[:verbose] = true
  end
  opts.on( "-h", "--help", "Display this screen" ) do
    puts opts
    exit
  end
end

optparse.parse!

if (options[:url].nil? || options[:metric].nil? || options[:warning].nil? || options[:critical].nil?)
  puts optparse
  exit 2
end

metric = options[:metric]
datapoints = options[:datapoints].to_i
skipDatapoints = options[:skipDatapoints].to_i
timeInterval = options[:timeInterval].to_i
from = (timeInterval * (datapoints + skipDatapoints)).to_s
endBuffer = (timeInterval * skipDatapoints).to_i # sometimes recent data (within some timeframe) is not complete, especially for aggregations

url = options[:url].to_s + "/render/?target=" + metric + "&format=json&from=-" + from + "s&until=-" + endBuffer.to_s + "s"

data = {}
data["total"] = 0

JSON.parse(RestClient.get(URI.encode(url))).each do |cache|
  if (options[:verbose])
    puts "#{url}"
  end
  count = 0
  warningPoints = 0
  criticalPoints = 0
  okPoints = 0
  latestValue = 0
  cache["datapoints"].each do |point|
    if (options[:verbose])
      puts "#{point}"
    end
    unless (point[0].nil?)
      if (options[:critical].to_f > options[:warning].to_f)
        # logic for upper bounds
        if (point[0].to_f >= options[:critical].to_f)
          criticalPoints += 1
          warningPoints += 1
        elsif (point[0].to_f >= options[:warning].to_f)
          warningPoints += 1
        else
          okPoints += 1
        end
      else
        # logic for lower bounds
        if (point[0].to_f <= options[:critical].to_f)
          criticalPoints += 1
          warningPoints += 1
        elsif (point[0].to_f <= options[:warning].to_f)
          warningPoints += 1
        else
          okPoints += 1
        end
      end

      count += 1
      latestValue = point[0]

    end
  end
  if (count < options[:datapoints].to_i)
    puts "OK value = #{latestValue} - only found #{count} data points, #{options[:datapoints].to_s} required"
    exit EXIT_OK
  else
    if (options[:verbose])
      puts "Processed #{count} datapoints - OK: #{okPoints}, WARNING: #{warningPoints}, CRITICAL: #{criticalPoints}"
    end
  end

  if (criticalPoints >= options[:alarmThreshold].to_i)
    puts "CRITICAL value = #{latestValue} vs #{options[:critical]} - #{criticalPoints}/#{count} breaches"
    exit EXIT_CRITICAL
  elsif (warningPoints >= options[:alarmThreshold].to_i)
    puts "WARNING value = #{latestValue} vs #{options[:warning]} - #{warningPoints}/#{count} breaches"
    exit EXIT_WARNING
  else
    puts "OK value = #{latestValue}, ok: #{okPoints}, warning: #{warningPoints}, critical: #{criticalPoints}"
    exit EXIT_OK
  end

end
